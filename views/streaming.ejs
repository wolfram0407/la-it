<div class="liveMasterWrap">
    <div class="channelId" style="display: none"><%= channel.channel.channelId %></div>
    <div class="liveMasterMainBox">
        <div class="liveMasterVideoBox">
            <div id="call">
                <div id="myStream">
                    <video id="video" autoplay width="100%" height="777px" controls></video>
                </div>
            </div>
        </div>

        <div class="liveMasterSettingBox">
            <div class="masterSettingBoxLeft">
                <div class="masterSettingTitle">
                    <span>제목</span>
                    <input maxlength="10" class="titleInput" id="streamingTitle" type="text" placeholder="방송 제목 입력해주세요." />
                    <span hidden id="streamingTitleContent"></span>
                </div>
                <div class="masterSettingDesc">
                    <span>내용</span>
                    <input maxlength="10" class="descInput" id="streamingDesc" type="text" placeholder="방송 상세정보를 입력해주세요." />
                    <span hidden id="streamingDescContent"></span>
                </div>
            </div>
            <div class="MasterSettingBoxRight">
                <div class="broadcastBtn">
                    <div class="broadcastBtnImg">
                        <img src="/imgs/facetime-button (1).png" />
                    </div>
                    <div class="broadcastBtnDesc">
                        <button id="liveStartBtn">방송시작</button>
                    </div>
                </div>
                <div class="broadcastCloseBtn" hidden>
                    <div class="broadcastBtnImg"><img src="/imgs/facetime-button (1).png" /></div>
                    <div class="broadcastCloseBtnDesc">
                        <button id="liveEndBtn">방송종료</button>
                    </div>
                </div>
                <!-- <div class="masterSettingBtn">
                    <img src="/imgs/settings-cogwheel-button.png" />
                    방송설정
                </div> -->
            </div>
        </div>
    </div>
    <div class="liveChatBox" id="liveChatBoxContainer">
        <div class="chatTitle">채팅</div>
        <div class="chatMain" id="chatBoxWrapStreaming">
            <div class="chatBox" id="chatBox" style="margin-bottom: -13px">
                <div class="chatList" id="oneChat">
                    <div class="chatNickname" id="chatNickname"></div>
                    <div class="chatText" id="chatText"></div>
                </div>
            </div>
            <div class="chatInputWrap streamingChatInputWrap">
                <input maxlength="50" type="text" id="chatInputStreamerPage" class="chatInputText" style="width: 80%; font-size: 20px; color: whitesmoke; border-radius: 10px" />
                <button class="sendChat" id="sendChatBtnStreamerPage">전송</button>
            </div>
        </div>
    </div>
</div>
<!--<script defer src="/script/streaming.js"></script>-->
<script defer src="/script/chat.js"></script>
<script>
    const liveStartBtn = document.getElementById('liveStartBtn');
    const liveEndBtn = document.getElementById('liveEndBtn');
    const broadcastBtn = document.querySelector('.broadcastBtn');
    const broadcastCloseBtn = document.querySelector('.broadcastCloseBtn');
    const channelId = document.querySelector('.channelId').textContent;
    const streamingTitle = document.getElementById('streamingTitle');
    const streamingDesc = document.getElementById('streamingDesc');
    const streamingTitleContent = document.getElementById('streamingTitleContent');
    const streamingDescContent = document.getElementById('streamingDescContent');
    console.log('channelId: ', channelId);

    const video = document.getElementById('video');

    // 방송 시작 버튼 눌렀을때 라이브 등록 처리
    liveStartBtn.addEventListener('click', createLive);
    let liveStatus = `<%= channel.channel.liveStatusValue %>`;
    console.log('liveStatus', typeof liveStatus);
    if (liveStatus === 'true') {
        broadcastBtn.hidden = true;
        broadcastCloseBtn.hidden = false;
        streamingTitle.hidden = true;
        streamingDesc.hidden = true;
        streamingTitleContent.hidden = false;
        streamingTitleContent.textContent = `<%= channel.channel.liveTitle %>`;
        streamingDescContent.hidden = false;
        streamingDescContent.textContent = `<%= channel.channel.liveDesc %>`;

        if (Hls.isSupported()) {
            1;
            const hls = new Hls({
                debug: false,
            });

            //console.log(`${HLS_URL}/hls/${streamKey}/index.m3u8`);
            hls.loadSource(`<%= channel.hlsUrl %>/hls/<%= channel.channel.streamKey %>/index.m3u8`);

            hls.attachMedia(video);
            hls.on(Hls.Events.MEDIA_ATTACHED, function () {
                video.muted = true;
                video.play();
            });
        }
    } else if (liveStatus === 'false') {
        broadcastBtn.hidden = false;
        broadcastCloseBtn.hidden = true;
    }

    async function createLive() {
        const getAccessToken = getCookie('Authorization');
        let streamingTitle = document.getElementById('streamingTitle').value;
        let streamingDesc = document.getElementById('streamingDesc').value;

        await axios
            .post(
                `/api/live/create/${channelId}`,
                {
                    title: streamingTitle,
                    description: streamingDesc,
                },
                {
                    withCredentials: true,
                    headers: {
                        authorization: getAccessToken,
                    },
                },
            )
            .then(function (response) {
                //console.log('response: ', response);

                const streamKey = response.data.channel.streamKey;
                //console.log('streamKey: ', streamKey);
                broadcastBtn.hidden = true;
                broadcastCloseBtn.hidden = false;

                if (Hls.isSupported()) {
                    1;
                    const hls = new Hls({
                        debug: false,
                    });

                    //console.log(`${HLS_URL}/hls/${streamKey}/index.m3u8`);
                    hls.loadSource(`<%= channel.hlsUrl %>/hls/${streamKey}/index.m3u8`);
                    hls.attachMedia(video);
                    hls.on(Hls.Events.MEDIA_ATTACHED, function () {
                        video.muted = true;
                        video.play();
                    });
                }
            })
            .catch(function (error) {
                //console.log(error);
            });
    }
</script>
